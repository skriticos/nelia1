
UNIVERSAL DATA AND METHOD ACCESS

--- HELP ---
. (root data address)
/ (separator)
module name
access key

GUI CONTROL ELEMENTS

[add module] (recursive)
[add variable] (list or custom(select))
[input] (standard, no validation, validation method bound)
[add method] (input vars, output vars)
[add mapping] (input protocol, output protocol)
[add mapping] (standard type or none)
[add view] (data -> aggregation(fields(x,y,..), correlation(func))
[add action] (method, signal, condition(validator))

--- E.G. ---

Preferences module, path variable (string typei

   ./preferences/path
   ./preferences/...
   ./preferences/!save->bool
   ./preferences/&path (format(str), get, set)

NOTE: &PATH IS THE GUI ELEMENT FOR INPUT, STR FORMAT, GET->STR AND SET(STR) SUPPORTED

Projects module, project index:

	./projects/<project_id> (int)
	./projects/<project_id>/name
	./projects/<project_id>/type
	./projects/<project_id>/...

	./projects/:add(name, type, category, priority, challenge) -> id
	./projects/:change(id, name, type, category, priority, challenge)
	./projects/:delete(id)

Log module. Store multiple logs for multiple projects (with the keys).

	./log/<./projects/project_id>/<log_id>/timestamp (int - time.time())
	./log/<./projects/project_id>/<log_id>/summary (str)
	./log/<./projects/project_id>/<log_id>/details (str)
	./log/<./projects/project_id>/<log_id>/...

Mapping (special method)

	./map_module/~mapping_name(input)->output

View..

Input..

	./foo/?input_method(input, int(min:x, max:y))
	./bar/?input_method(input, str(maxlen:x, pattern:y))
	./baz/?input_method(input, str(validator:val)
	./baz/:baz(input)->bool
