#!/usr/bin/env python3

import os, sys, pprint, time
from PySide.QtCore import *
from PySide.QtGui import *


class MainListing(QTableView):

    """
        Stores the data for the main listing and contains the 
        interactions with the table.
    """

    def __init__(self, parent):

        super().__init__(parent)
        
        # This model contains the root level data
        self.model = QStandardItemModel()
       
        # Labels for the column headers
        # To get column numbers, use self.headers.index('Name') ..
        self.headers = [
            'Name', 'Entry Type', 'Status', 
            'Category', 'Priority', 'Challenge', 
            'Version', 'Last Changed', 'ID' ]
        
        self.model.setHorizontalHeaderLabels(self.headers)

        self.data = { 'lastid' : 0}

        self.setModel(self.model)

        self.setSortingEnabled(True)
        self.setEditTriggers(QAbstractItemView.NoEditTriggers)

    def removeActiveRow(self):
    
        rowindex = self.currentIndex().row()
        child = self.model.index(rowindex, 8) # 8 = ID column
        entryid = self.model.itemFromIndex(child).text()
        del self.data[int(entryid)]
        self.model.removeRow(rowindex)

    def addNewRow(self, name, entrytype, category, priority, challange):

        entryid = self.data['lastid'] + 1
        entry = [
            name, entrytype, 'Spark', category,
            priority, challange, '0.0.0',
            int(time.time())
        ]

        self.data[entryid] = entry
        self.data['lastid'] += 1
        
        self.model.appendRow([
            QStandardItem(name),
            QStandardItem(entrytype),
            QStandardItem('Spark'),
            QStandardItem(category),
            QStandardItem(str(priority)),
            QStandardItem(str(challange)),
            QStandardItem('0.0.0'),
            QStandardItem(str(int(time.time()))),
            QStandardItem(str(entryid))
        ])
    
    def changeRow(self, itemid, rowindex, name, entrytype, 
                  category, priority, challange):

        status = self.model.itemFromIndex(
            self.model.index(rowindex, 2)).text()
        
        version = self.model.itemFromIndex(
            self.model.index(rowindex, 6)).text()
        
        entry = [
            name, entrytype, status, category,
            priority, challange, version,
            int(time.time())
        ]

        self.data[itemid] = entry

        tabdat = (
            (0, name), 
            (1, entrytype),
            (2, status),
            (3, category),
            (4, priority),
            (5, challange),
            (6, version),
            (7, int(time.time())),
            (8, itemid)
        )

        for index, value in tabdat:
            self.model.setData(
                self.model.index(rowindex, index), value)


class EditEntryWidget(QDialog):

    def __init__(self, parent):

        super().__init__(parent)
        
        self.setWindowTitle('Create new entry')
        self.setGeometry(200,200,500,300)
        self.setModal(True)

        self.changeButton = QPushButton('Change', self)
        self.changeButton.clicked.connect(self.onChangeClick)
        self.createButton = QPushButton('Create', self)
        self.createButton.clicked.connect(self.onCreateClick)
        self.cancelButton = QPushButton('Cancel', self)
        self.cancelButton.clicked.connect(self.hide)
        
        self.inputName = QLineEdit(self)

        self.inputEntryType = QComboBox();
        inputEntryTypeLabels = [
            'Utility',
            'Application',
            'Library',
            'Protocol',
            'Other' ]
        for label in inputEntryTypeLabels:
            self.inputEntryType.addItem(label)

        self.inputCategory = QComboBox()
        inputCategoryLabels = [
            'Internet',
            'Development',
            'Accessory',
            'Media',
            'Game',
            'Office',
            'Education',
            'Science',
            'Engineering',
            'Graphics',
            'System',
            'Customization',
            'Other' ]
        for label in inputCategoryLabels:
            self.inputCategory.addItem(label)
        
        self.inputPriority = QSpinBox(self)
        self.inputChallange = QSpinBox(self)

        formlay = QFormLayout()
        formlay.addRow('Name', self.inputName)
        formlay.addRow('Entry Type', self.inputEntryType)
        formlay.addRow('Category', self.inputCategory)
        formlay.addRow('Priority', self.inputPriority)
        formlay.addRow('Challenge', self.inputChallange)

        hbox = QHBoxLayout()
        hbox.addStretch()
        hbox.addWidget(self.cancelButton)
        hbox.addWidget(self.createButton)
        hbox.addWidget(self.changeButton)

        vbox = QVBoxLayout()
        vbox.addLayout(formlay)
        vbox.addLayout(hbox)

        self.setLayout(vbox)

    def show(self):
        
        self.inputName.clear()
        self.inputEntryType.setCurrentIndex(0)
        self.inputCategory.setCurrentIndex(0)
        self.inputPriority.setValue(0)
        self.inputChallange.setValue(0)
        self.changeButton.hide()
        self.createButton.hide()

        super().show()

    def showChange(self):

        self.show()
        self.changeButton.show()
        
        table = self.parent().table
        model = table.model
        rowindex = table.currentIndex().row()

        # read the fields
        self.inputName.setText(
            model.itemFromIndex(
            model.index(rowindex, 0)).text())
        
        self.inputEntryType.setCurrentIndex(
            self.inputEntryType.findText(
            model.itemFromIndex(
            model.index(rowindex, 1)).text()))

        self.inputCategory.setCurrentIndex(
            self.inputCategory.findText(
            model.itemFromIndex(
            model.index(rowindex, 3)).text()))

        self.inputPriority.setValue(
            int(
            model.itemFromIndex(
            model.index(rowindex, 4)).text()))

        self.inputChallange.setValue(
            int(
            model.itemFromIndex(
            model.index(rowindex, 5)).text()))
        
    def showCreate(self):

            self.show()
            self.createButton.show()

    def onCreateClick(self):

        self.parent().table.addNewRow(
            self.inputName.text(), self.inputEntryType.currentText(),
            self.inputCategory.currentText(), 
            self.inputPriority.value(), self.inputChallange.value())

        self.hide()

    def onChangeClick(self):

        table = self.parent().table
        model = table.model
        rowindex = table.currentIndex().row()

        itemid = int(model.itemFromIndex(
            model.index(rowindex, 8)).text())

        self.parent().table.changeRow(itemid, rowindex,
            self.inputName.text(), self.inputEntryType.currentText(),
            self.inputCategory.currentText(), 
            self.inputPriority.value(), self.inputChallange.value())

        self.hide()


class MainWindow(QMainWindow):
    """
        This is the class folr the main window, 
        which contains the rool entry control and display.
    """

    def __init__(self, app):

        super().__init__()
        self.app = app
        self.path = ''

        self.editEntryWidget = EditEntryWidget(self)

        self.setWindowTitle('Nelia')
        self.setGeometry(100,100,1000,600)
        self.table = MainListing(self)
        self.setCentralWidget(self.table)

        self.mnuFile = self.menuBar().addMenu('&File')
        self.mnuView = self.menuBar().addMenu('&View')
        self.mnuActions = self.menuBar().addMenu('&Actions')
        self.mnuBrowse = self.menuBar().addMenu('&Browse')
        self.mnuDeploy = self.menuBar().addMenu('&Deploy')
        self.mnuProto = self.menuBar().addMenu('&Prototype')
        self.mnuConfig = self.menuBar().addMenu('&Config')
        self.mnuHelp = self.menuBar().addMenu('&Help')

        # prototype menu
        # stub
        self.actProjectPT = QAction('&Project..', self)
        self.mnuProto.addAction(self.actProjectPT)
        self.actModulePT = QAction('&Module..', self)
        self.mnuProto.addAction(self.actModulePT)
        self.actInterfacePT = QAction('&Interface..', self)
        self.mnuProto.addAction(self.actInterfacePT)

        # config menu
        # stub
        self.actConfigFiles = QAction('&ConfigFiles..', self)
        self.mnuConfig.addAction(self.actConfigFiles)
        
        # stub
        self.actPackages = QAction('&Packages..', self)
        self.mnuConfig.addAction(self.actPackages)
        
        # stub
        self.actConnection = QAction('&Connection..', self)
        self.mnuConfig.addAction(self.actConnection)

        # deploy menu starts here
        # stub
        self.actCommit = QAction('&Commit..', self)
        self.mnuDeploy.addAction(self.actCommit)
        
        # stub
        self.actTest = QAction('&Test..', self)
        self.mnuDeploy.addAction(self.actTest)

        # stub
        self.actDeploy = QAction('&Deploy..', self)
        self.mnuDeploy.addAction(self.actDeploy)

        # help menu starts here
        # stub
        self.actAbout = QAction('&About..', self)
        self.mnuHelp.addAction(self.actAbout)

        # view menu starts here
        # stub
        self.actDashboard = QAction('&Dashboard..', self)
        self.mnuView.addAction(self.actDashboard)

        # stub
        self.actReport = QAction('&Report..', self)
        self.mnuView.addAction(self.actReport)

        # brows menu starts here
        # stub
        self.actOpenFolder = QAction('&Open Folder..', self)
        self.mnuBrowse.addAction(self.actOpenFolder)

        # stub
        self.actBrowseRepository = QAction('&Browse Repository..', self)
        self.mnuBrowse.addAction(self.actBrowseRepository)


        # actions menu starts here
        self.actNewEntry = QAction('&New..', self, triggered=self.editEntryWidget.showCreate)
        self.mnuActions.addAction(self.actNewEntry)

        self.actChangeEntry = QAction('&Edit..', self, triggered=self.editEntryWidget.showChange)
        self.mnuActions.addAction(self.actChangeEntry)

        self.actDeleteEntry = QAction('&Delete..', self, triggered=self.table.removeActiveRow)
        self.mnuActions.addAction(self.actDeleteEntry)

        self.mnuActions.addSeparator()
        
        # stub
        self.actEntryPath = QAction('&Path..', self)
        self.mnuActions.addAction(self.actEntryPath)

        # stub
        self.actEntryLog = QAction('&Log..', self)
        self.mnuActions.addAction(self.actEntryLog)

        # stub
        self.actEntryMap = QAction('&Map..', self)
        self.mnuActions.addAction(self.actEntryMap)
        
        # stub
        self.actEntryData = QAction('&Data..', self)
        self.mnuActions.addAction(self.actEntryData)
        
        # stub
        self.actEntryProtocol = QAction('&Protocol..', self)
        self.mnuActions.addAction(self.actEntryProtocol)
        
        # stub
        self.actEntryBlueprint = QAction('&Blueprint..', self)
        self.mnuActions.addAction(self.actEntryBlueprint)
        
        # stub
        self.actEntryRoadmap = QAction('&Roadmap..', self)
        self.mnuActions.addAction(self.actEntryRoadmap)
        
        # stub
        self.actEntryIssues = QAction('&Issues..', self)
        self.mnuActions.addAction(self.actEntryIssues)

        # stub
        self.actEntryFeatures = QAction('&Features..', self)
        self.mnuActions.addAction(self.actEntryFeatures)

        # stub, items to be refactored
        self.actEntryRefactor = QAction('&Refactor..', self)
        self.mnuActions.addAction(self.actEntryRefactor)

        # file menu starts here
        # stub
        self.actOpen = QAction('&Open..', self)
        self.mnuFile.addAction(self.actOpen)
        
        self.actSave = QAction('&Save', self, triggered=self.save)
        self.mnuFile.addAction(self.actSave)
        
        # stub
        self.actSaveAs = QAction('Sa&ve as..', self, triggered=self.saveAs)
        self.mnuFile.addAction(self.actSaveAs)

        # stub
        self.actMerge = QAction('&Merge..', self)
        self.mnuFile.addAction(self.actMerge)
        
        self.mnuFile.addSeparator()

        # stub
        self.actPreferences = QAction('P&references..', self)
        self.mnuFile.addAction(self.actPreferences)

        self.mnuFile.addSeparator()

        self.actQuit = QAction('&Quit', self, triggered=self.app.exit)
        self.mnuFile.addAction(self.actQuit)

        self.setWindowIcon(QIcon('icon.png'))        

        self.show()

    def save(self):

        if self.path == '':
            self.saveAs()

    def saveAs(self):

        file_name = QFileDialog.getSaveFileName(
            self, 'Save Nelia file', os.path.expanduser('~'), 'Nelia Files (*.nelia)')[0]

        if file_name.rfind('.nelia') != len(file_name) - 6:
            file_name += '.nelia'

        # stub CONTINUE HERE


if __name__ == '__main__':
    application = QApplication(sys.argv) 
    main_window = MainWindow(application)
    sys.exit(application.exec_())


# vim: set ts=4 sw=4 ai si expandtab:

