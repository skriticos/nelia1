
.. status.startup

'btn_mi_reopen': {'enabled': False}

..

status.miopen = {
    'btn_mi_close' : {'enabled': True},
    'btn_mi_reopen': {'enabled': False}
}

status.miclosed = {
    'btn_mi_close' : {'enabled': False},
    'btn_mi_reopen': {'enabled': True}
}

.. initCallbacks

dc.ui.roadmap.v.btn_mi_close.clicked.connect(dc.m.project.v.onMiClosed)
dc.ui.roadmap.v.btn_mi_reopen.clicked.connect(dc.m.project.v.onMiReopen)

.. onSelectionChanged

if dc.sp.m.mi._(smiid).status.v == 'Open':
    applyStates(states.miopen, dc.ui.roadmap.v)
else:
    applyStates(states.miclosed, dc.ui.roadmap.v)

.. NxRoadmap

@logger('NxRoadmap.onMiClosed(self)', 'self')
def onMiClosed(self):

    smiid = dc.x.roadmap.smiid.v
    dc.sp.m.mi._(smiid).status.v = 'Closed'
    setTableValue('roadmap', milist.colStatus, 'Closed')
    touchRoadmap()
    reloadTable()

    dc.m.log.v.addAutoLog('Milestone', 'Milestone item {} closed'.format(smiid),
                          'Milestone item {} - "{}" has been closed in milestone
                          v{}.{}.'.format(smiid, dc.sp.m.mi._(smiid).name.v,
                          dc.sp.m.selected.v[0], dc.sp.m.selected.v[1]))

    # STUB: update mistnavi

@logger('NxRoadmap.onMiReopen(self)', 'self')
def onMiReopen(self):

    smiid = dc.x.roadmap.smiid.v
    dc.sp.m.mi._(smiid).status.v = 'Open'
    setTableValue('roadmap', milist.colStatus, 'Open')
    touchRoadmap()
    reloadTable()

    dc.m.log.v.addAutoLog('Milestone', 'Milestone item {} reopened'.format(smiid),
                          'Milestone item {} - "{}" has been reopened in milestone
                          v{}.{}.'.format(smiid, dc.sp.m.mi._(smiid).name.v,
                          dc.sp.m.selected.v[0], dc.sp.m.selected.v[1]))

    # STUB: update mistnavi

