txt_mi_description

..

dc.ui.roadmap.v.txt_mi_description.textChanged.connect(
    dc.m.roadmap.v.onMilestoneItemDestriptionChanged)

..

dc.ui.roadmap.v.txt_mi_description.textChanged.disconnect(
    dc.m.roadmap.v.onMilestoneItemDestriptionChanged)

..

class EfMilestoneItemDescriptionFocusOut(QObject):
    def eventFilter(self, obj, event):
        if event.type() == QEvent.Type.FocusOut:
            if dc.x.roadmap.changeflag.milestone_item_description.v:
                description = dc.ui.roadmap.v.txt_mi_description.toHtml()
                smiid = dc.x.roadmap.smiid.v
                dc.sp.m.mi._(smiid).description.v = description
            dc.x.roadmap.changeflag.milestone_item_description.v = False
        return QObject.eventFilter(self, obj, event)
ef_milestone_item_desription_focus_out = EfMilestoneItemDescriptionFocusOut()

..

dc.x.roadmap.changeflag.milestone_item_description.v = False
dc.ui.roadmap.v.txt_mi_description.installEventFilter(
    ef_milestone_item_desription_focus_out)

..

@logger('NxRoadmap.onMilestoneItemDestriptionChanged(self)', 'self')
onMilestoneItemDestriptionChanged(self):

        self.touchRoadmap()

        if not dc.auto.v:
            dc.x.roadmap.changeflag.milestone_item_description.v = True

..

