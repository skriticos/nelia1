#! /usr/bin/python3
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# So this happens to have morphed into a full fledged source file..
#
# We start with a copy of datacore to perform testing
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

from PySide.QtCore import *
from PySide.QtGui import *

class _dcNode:
    def __init__(self, name):
        self.v = None
        self._name = name
    def __getattr__(self, key):
        name = '{}.{}'.format(self._name, key)
        self.__dict__[key] = _dcNode(name)
        return self.__dict__[key]
    def __setattr__(self, key, value):
        self.__dict__[key] = value
    def _(self, key):
        k = key
        if isinstance(key, int):
            k = '_' + str(key)
        name = '{}.{}'.format(self._name, k)
        if k not in self.__dict__:
            self.__dict__[k] = _dcNode(name)
        return self.__dict__[k]
    def _reset(self):
        keys = list(self.__dict__.keys())
        for k in keys:
            if isinstance(self.__dict__[k], _dcNode):
                del self.__dict__[k]
        self.v = None
def _dcdump(node=None, path=''):
    if not node: node = dc
    if node.v is not None:
        if node.v == '':
            print('dc.' + path + '.v =  \'\'')
        else:
            print('dc.' + path + '.v = ', node.v)
    for x in node.__dict__.keys():
        if isinstance(node.__dict__[x], _dcNode):
            _dcdump(node=node.__dict__[x], path=path + bool(path)*'.' + x)
dc = _dcNode('dc')

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
class LabelComputation:

    def __init__(self):

        # label for minors is like '◇  v0.0  +0:0  f:0/0  i:0/0'
        # label for major  is like '◇  v0.x  +0  f:0/0  i:0/0'
        self.label = ''
        self.diamond = '◇ ◈ ◆'
        self.open_features = 0
        self.total_features = 0
        self.open_issues = 0
        self.total_issues = 0
        self.delta_major = 0
        self.delta_minor = 0
        self.delta_sign = '+'

def computeMinorLabelItems(major, minor):

    out = LabelComputation()

    # compute feature / issue count
    for miid in dc.sp.m._(major)._(minor).index.v:

        if dc.sp.m.mi._(miid).mtype.v == 'Feature':
            out.total_features += 1

            if dc.sp.m.mi._(miid).status.v == 'Open':
                out.open_features += 1

        if dc.sp.m.mi._(miid).mtype.v == 'Issue':
            out.total_issues += 1

            if dc.sp.m.mi._(miid).status.v == 'Open':
                out.open_issues += 1

    amajor, aminor = dc.sp.m.active.v

    # compute diamond and delta

    # different major version than active
    if major < amajor:
        out.diamond = '◆'
        out.delta_sign = '-'
        out.delta_major = amajor - major

        inActive = aminor
        inBetween = 0
        for x in range(major+1, amajor):
            inBetween += len(dc.sp.m._(x).index.v)

        inCalc = len(dc.sp.m._(major).index.v) - minor
        if major == 0:
            inCalc += 1

        out.delta_minor = inActive + inBetween + inCalc

    elif major > amajor:
        out.diamond = '◇'
        out.delta_sign = '+'
        out.delta_major = major - amajor

        inActive = len(dc.sp.m._(amajor).index.v) - aminor
        if amajor == 0:
            inActive += 1

        inBetween = 0
        for x in range(amajor+1, major):
            inBetween += len(dc.sp.m._(x).index.v)
        inCalc = minor

        out.delta_minor = inActive + inBetween + inCalc

    # same major verson as active
    else:

        out.delta_major = 0

        if minor < aminor:
            out.diamond = '◆'
            out.delta_sign = '-'
            out.delta_minor = aminor - minor
        elif minor > aminor:
            out.diamond = '◇'
            out.delta_sign = '+'
            out.delta_minor = minor - aminor
        else:
            out.diamond = '◈'
            out.delta_sign = '+'
            out.delta_minor = 0

    # compose label
    out.label = '{}  v{}.{}  {}{}:{}   f:{}/{}  i:{}/{}'.format(
                    out.diamond,
                    major,
                    minor,
                    out.delta_sign,
                    out.delta_major,
                    out.delta_minor,
                    out.total_features - out.open_features,
                    out.total_features,
                    out.total_issues - out.open_issues,
                    out.total_issues)

    return out

def computeMajorLabelItems(major):

    out = LabelComputation()

    minors = dc.sp.m._(major).index.v
    for minor in minors:

        for miid in dc.sp.m._(major)._(minor).index.v:

            if dc.sp.m.mi._(miid).mtype.v == 'Feature':
                out.total_features += 1

                if dc.sp.m.mi._(miid).status.v == 'Open':
                    out.open_features += 1

            if dc.sp.m.mi._(miid).mtype.v == 'Issue':
                out.total_issues += 1

                if dc.sp.m.mi._(miid).status.v == 'Open':
                    out.open_issues += 1

    amajor, aminor = dc.sp.m.active.v

    if major < amajor:
        out.diamond = '◆'
        out.delta_sign = '-'
        out.delta_major = amajor - major

    elif major > amajor:
        out.diamond = '◇'
        out.delta_sign = '+'
        out.delta_major = major - amajor

    else:
        out.diamond = '◈'
        out.delta_sign = '+'
        out.delta_major = 0

    # compose label
    out.label = '{}  v{}  {}{}  f:{}/{}  i:{}/{}'.format(
                    out.diamond,
                    major,
                    out.delta_sign,
                    out.delta_major,
                    out.total_features - out.open_features,
                    out.total_features,
                    out.total_issues - out.open_issues,
                    out.total_issues)

    return out

def updateMenuTree(_menu):

    for major in dc.sp.m.index.v:

        loop_major_menu = QMenu(_menu)
        loop_major_menu.setTitle(computeMajorLabelItems(major).label)
        dc.ui.roadmap.menu._(major).v = loop_major_menu
        print('added major menu item: {}'.format(computeMajorLabelItems(major).label))

        for minor in dc.sp.m._(major).index.v:

            action = QAction(_menu)
            action.setText(computeMinorLabelItems(major, minor).label)
            print('added minor menu action: {}'.format(computeMinorLabelItems(major, minor).label))
            loop_major_menu.addAction(action)

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The following code generates test roadmap data

def _testGenerateDc(
                # (major, minor, open f, total f, open i, total f)
    milestones, # ((0, 1, 0, 1, 0, 1), (0, 2, 0, 1, 0, 1),
                #  (1, 0, 0, 1, 0, 1), (1, 2, 0, 3, 0, 3))
    active,     # (0, 1)
    selected):  # (1, 1))

    versions = ''
    for major, minor, fc, ft, ic, it in milestones:

        versions += '{}.{} [{}/{}, {}/{}]'.format(major, minor, fc, ft, ic, it)
        if (major, minor) == active:
            versions += ' (a)'
        if (major, minor) == selected:
            versions += ' (s)'
        versions += '\n'

    print(versions)

    dc.sp.m.mi.nextid.v   = 1
    dc.sp.m.mi.index.v    = {}
    dc.sp.m.active.v      = active
    dc.sp.m.selected.v    = selected
    dc.sp.m.index.v       = set()

    for major, minor, fc, ft, ic, it in milestones:

        dc.sp.m.index.v |= {major}

        if not isinstance(dc.sp.m._(major).index.v, set):
            dc.sp.m._(major).index.v = {minor}
        else:
            dc.sp.m._(major).index.v |= {minor}

        dc.sp.m._(major)._(minor).index.v = set()

        for x in range(fc):

            miid = dc.sp.m.mi.nextid.v
            dc.sp.m.mi.nextid.v += 1
            dc.sp.m.mi.index.v[miid] = (major, minor)

            dc.sp.m.mi._(miid).mtype.v = 'Feature'
            dc.sp.m.mi._(miid).status.v = 'Closed'

            dc.sp.m._(major)._(minor).index.v |= {miid}

        for x in range(ft - fc):

            miid = dc.sp.m.mi.nextid.v
            dc.sp.m.mi.nextid.v += 1
            dc.sp.m.mi.index.v[miid] = (major, minor)

            dc.sp.m.mi._(miid).mtype.v = 'Feature'
            dc.sp.m.mi._(miid).status.v = 'Open'

            dc.sp.m._(major)._(minor).index.v |= {miid}

        for x in range(ic):

            miid = dc.sp.m.mi.nextid.v
            dc.sp.m.mi.nextid.v += 1
            dc.sp.m.mi.index.v[miid] = (major, minor)

            dc.sp.m.mi._(miid).mtype.v = 'Issue'
            dc.sp.m.mi._(miid).status.v = 'Closed'

            dc.sp.m._(major)._(minor).index.v |= {miid}

        for x in range(it - ic):

            miid = dc.sp.m.mi.nextid.v
            dc.sp.m.mi.nextid.v += 1
            dc.sp.m.mi.index.v[miid] = (major, minor)

            dc.sp.m.mi._(miid).mtype.v = 'Issue'
            dc.sp.m.mi._(miid).status.v = 'Open'

            dc.sp.m._(major)._(minor).index.v |= {miid}

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# The following code test minor label computation

def _testComputeMinorLabelItems():

    app = QApplication(['foo'])
    menu = QMenu()

    _testGenerateDc(
            ((0, 1, 0, 1, 0, 1),
             (0, 2, 0, 1, 0, 1),
             (1, 0, 0, 1, 0, 1),
             (1, 1, 0, 3, 1, 3)),
            (0, 1),
            (1, 1))

    updateMenuTree(menu)

    print()
    print()

    dc._reset()

    _testGenerateDc(
            ((0, 1, 0, 1, 0, 1),
             (0, 2, 0, 1, 0, 1),
             (1, 0, 0, 1, 0, 1),
             (1, 1, 0, 3, 1, 3),
             (1, 2, 0, 1, 0, 1),
             (1, 3, 0, 1, 0, 1),
             (2, 0, 0, 0, 0, 1),
             (2, 1, 0, 0, 0, 0)),
            (1, 3),
            (1, 1))

    updateMenuTree(menu)

    print()
    print()

    dc._reset()

    _testGenerateDc(
            ((0, 1, 0, 1, 0, 1),
             (0, 2, 0, 1, 0, 1),
             (1, 0, 0, 1, 0, 1),
             (1, 1, 0, 3, 1, 3),
             (2, 0, 0, 0, 0, 1),
             (2, 1, 0, 0, 0, 0),
             (3, 0, 0, 0, 0, 0),
             (3, 1, 0, 0, 0, 0)),
            (1, 0),
            (1, 0))

    updateMenuTree(menu)

    dc._reset()
    _dcdump()

    print()
    print()

    dc._reset()

    _testGenerateDc(
            ((0, 1, 0, 1, 0, 1),
             (0, 2, 0, 1, 0, 1),
             (1, 0, 0, 1, 0, 1),
             (1, 1, 0, 3, 1, 3),
             (2, 0, 0, 0, 0, 1),
             (2, 1, 0, 0, 0, 0),
             (3, 0, 0, 0, 0, 0),
             (3, 1, 0, 0, 0, 0)),
            (3, 0),
            (3, 0))

    updateMenuTree(menu)

    dc._reset()
    _dcdump()

_testComputeMinorLabelItems()

# ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


