~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
Event filters for project/log description store all the content on each change
resulting in eventual performance penalties. In the roadmap module a focus out
filter was choosen as trigger for this to reduce latency. This should be adapted
to the project and log modlue too.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
onTextChanged -> set edited flag               (callback)
onFocusLost   -> save new value if flag is set (event filter)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                               INVOLVED CONTROLS

dc.ui.project.v.text_project_info
dc.ui.log.v.text_log_message

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                 EVENT FILTERS

== PROJECT ==

class EfProjectDescriptionFocusOut(QObject):
    def eventFilter(self, obj, event):
        if event.type() == QEvent.Type.FocusOut:
            if dc.x.project.changeflag.project_description.v:
                description = dc.ui.project.v.text_project_info.toHtml()
                dc.sp.description.v = description
            dc.x.project.changeflag.project_description.v = False
        return QObject.eventFilter(self, obj, event)
ef_project_deisription_focus_out = EfProjectDescriptionFocusOut()

.. NxProject.__init__() ..

dc.x.project.changeflag.project_description.v = False
dc.ui.project.v.text_project_info.installEventFilter(ef_project_deisription_focus_out)

== LOG ==

class EfLogDescriptionFocusOut(QObject):
    def eventFilter(self, obj, event):
        if event.type() == QEvent.Type.FocusOut:
            if dc.x.log.changeflag.log_description.v:
                slid = dc.x.log.slid.v
                description = dc.ui.log.v.text_log_message.toHtml()
                dc.sp.log._(slid).description.v = description
            dc.x.log.changeflag.log_description.v = False
        return QObject.eventFilter(self, obj, event)
ef_log_desription_focus_out = EfLogDescriptionFocusOut()

.. NxLog.__init() ..

dc.x.log.changeflag.log_description.v = False
dc.ui.log.v.text_log_message.installEventFilter(ef_log_desription_focus_out)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                                 EDIT CALLBACKS

== PROJECT ==

@logger('NxProject.onProjectDescriptionChanged(self)', 'self')
def onProjectDescriptionChanged(self):

    self.touchProject()

    if not dc.auto.v:
        dc.x.project.changeflag.project_description.v = True

== LOG ==

@logger('NxLog.onLogDescriptionChanged(self)', 'self')
def onLogDescriptionChanged(self):

    self.touchLog()

    if not dc.auto.v:
        dc.x.log.changeflag.log_description.v = True

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

                         CONNECT / DISCONNECT CALLBACKS

== PROJECT ==

.. enableEditCallbacks() ..

dc.ui.project.v.text_project_info.textChanged.connect(
    dc.m.project.v.onProjectDescriptionChanged)

.. disableEditCallbacks() ..

dc.ui.project.v.text_project_info.textChanged.disconnect(
    dc.m.project.v.onProjectDescriptionChanged)

== LOG ==

.. enableEditCallbacks() ..

dc.ui.log.v.text_log_message.textChanged.connect(
    dc.m.log.v.onlogDescriptionChanged)

.. disableEditCallbacks() ..

dc.ui.log.v.text_log_message.textChanged.disconnect(
    dc.m.log.v.onlogDescriptionChanged)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


